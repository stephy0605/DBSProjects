name: Create Azure VM Instance

on: 
  workflow_dispatch

jobs:
  terraform-deploy:
    runs-on: DevOps

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update apt and install prerequisites
        run: |
          sudo apt update -y || true
          sudo apt upgrade -y || true
          sudo apt install -y ansible
          echo "############# Ansible Version #############"
          ansible --version
          echo "############# Ansible Version #############"
          sudo apt-get install -y powershell
          echo "############# Powershell Version #############"
          pwsh --version
          echo "############# Powershell Version #############"
          sudo apt install -y terraform
          echo "############# Terraform Version #############"
          terraform --version
          echo "############# Terraform Version #############"
          echo "############# AZ Version #############"
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash || true
          az --version
          echo "############# AZ Version #############"
          sudo apt install -y docker.io
          sudo service docker start
          sudo service docker status || true
          echo "############# Docker Version #############"
          docker --version
          echo "############# Docker Version #############"

      # Step 3: Authenticate with Azure using email and password
      - name: Deploy a Azure VM and install a new Application
        shell: pwsh
        run: |
          Install-Module -Name Posh-SSH -Force -AllowClobber
          Import-Module Posh-SSH
          
          $username = ${{ secrets.AZURE_USER }}
          $password = ${{ secrets.AZURE_PASS }}
          
          Set-Location Terraform_Scripts
          try 
          {
              Write-Output "Initializing Terraform..."
              terraform init -upgrade
              if ($LASTEXITCODE -ne 0) {
                  throw "Error: Terraform init failed."
              }
          
              Write-Output "Creating Terraform plan..."
              terraform plan -out main.tfplan
              if ($LASTEXITCODE -ne 0) {
                  throw "Error: Terraform plan failed."
              }
          
              Write-Output "Applying Terraform plan..."
              terraform apply main.tfplan
              if ($LASTEXITCODE -ne 0) {
                  throw "Error: Terraform apply failed."
              }
          
              Write-Output "Terraform operations completed successfully."    
          
              $json = terraform output -json
              $parsedJson = $json | ConvertFrom-Json
              $publicIpAddress = "$($parsedJson.public_ip_address.value)"
              $publicIP = $publicIpAddress
              Write-Output $publicIP
              
              Start-Sleep -Second 15
              $keyPath = "~/.ssh/id_rsa"
              $publicKeyPath = "~/.ssh/id_rsa.pub"  
              if (-not (Test-Path $keyPath)) 
              {
                  Write-Host "Generating SSH key..."
                  echo "yes" | ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N "" -v
                  Write-Host "SSH Key generated"
              }
              
              $publicKeyContent = Get-Content $publicKeyPath
              $passwordSecure = ConvertTo-SecureString -AsPlainText -String $password -Force
              $credential = New-Object System.Management.Automation.PSCredential($username, $passwordSecure)
              $session = New-SSHSession -ComputerName $publicIP -Credential $credential -AcceptKey
              
              if ($session.Connected) 
              {
                  Write-Host "Connected to VM successfully."
                  $remoteAuthorizedKeysPath = "/home/azureadmin/.ssh/authorized_keys"
                  Invoke-SSHCommand -SessionId $session.SessionId -Command "mkdir -p /home/azureadmin/.ssh"
                  Invoke-SSHCommand -SessionId $session.SessionId -Command "echo '$publicKeyContent' >> $remoteAuthorizedKeysPath"
                  Invoke-SSHCommand -SessionId $session.SessionId -Command "chmod 600 $remoteAuthorizedKeysPath"
                  Invoke-SSHCommand -SessionId $session.SessionId -Command "chmod 700 ~/.ssh/"
                  Write-Host "Public key added to the remote VM."

                  $vm_ips = az vm list-ip-addresses --query "[].virtualMachine.network.publicIpAddresses[].ipAddress" -o tsv
                  Set-Location ..
                  Set-Location HelloWorld
                  docker build -t automated_app .
                  Set-Location ..
                  Set-Location Install_App_VM_Ansible
                  docker save -o automated_app.tar automated_app
                  $hostsContent = @"
          [azure_vm]
          azure_vms ansible_host=$publicIP ansible_user=azureadmin
          "@      
                  $hostsFilePath = "hosts.ini"
                  $hostsContent | Out-File -FilePath $hostsFilePath -Encoding UTF8
                  Write-Host "hosts.ini file has been created at $hostsFilePath"
                  ansible-playbook -i hosts.ini "deploy_docker_image.yml" -e ansible_password=${{ secrets.AZURE_PASS }} --ssh-extra-args="-o StrictHostKeyChecking=no"
                  Remove-SSHSession -SessionId $session.SessionId
              }
          }
          catch
          {
              Write-Output "Error: $_"
          }
